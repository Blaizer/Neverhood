#!/usr/bin/env perl
use strict;
use warnings;

use SDL;
use SDLx::Surface;
use SDL::Image;

my @name = sort glob "$ARGV[0]*.bmp";
for(@name) {
	my $old = $_;
	if(s/\/D(?!.*\/)/\// or s/^D(?!.*\/)//) {
		rename $old, $_;
	}
}
my @file = map SDLx::Surface->new(surface => SDL::Image::load($_)), @name;
my @sequence;
for my $first (0..$#file-1) {
	my $s1 = $file[$first];
	if(ref $s1) {
		push @sequence, $first;
		for my $second (grep ref $file[$_], $first+1..$#file) {
			my $s2 = $file[$second];
			if($s1->w == $s2->w and $s1->h == $s2->h) {
				DUP: {
					for my $x (0..$s1->w-1) {
						for my $y (0..$s1->h-1) {
							last DUP if $s1->[$x][$y] != $s2->[$x][$y];
						}
					}
					$file[$second] = $first;
					local $_ = $name[$second];
					s/\/(?!.*\/)/\/D/ or s/^/D/;
					rename $name[$second], $_;
				}
			}
		}
	}
	else {
		push @sequence, $file[$first];
	}
}
push @sequence, ref $file[$#file] ? $#file : $file[$#file];

my @new;
$#new = $#sequence;

my ($look, $actually) = (0, 0);
while(grep !defined, @new) {
	my $found;
	for(0..$#sequence) {
		if($sequence[$_] == $look) {
			$new[$_] = $actually;
			$found = 1;
		}
	}
	if($found) {
		$actually++;
	}
	$look++;
}

open SEQUENCE, ">$ARGV[0]sequence.txt" or die join ", ", @new;
print SEQUENCE join ", ", @new;
close SEQUENCE;
